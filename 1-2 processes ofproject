#include <iostream>
#include <vector>
#include <string>
#include <fstream>
#include<sstream>
using namespace std;

//  Stock Structure 
struct Stock {
    int id;
    string name;
    int quantity;
};

// Global vector to store stock records
vector<Stock> stockList;

//  Function Declarations 
void stockMenu();
void createStock();
void searchStock();
void updateStock();
void deleteStock();

// Main Function 
int main() {
    int choice;

    do {
        cout << "\n Warehouse Stock Tracking System \n";
        cout << "1. Stock Management\n";
        cout << "2. Item Information Management (here your work bro)\n";
        cout << "3. Exit\n";
        cout << "\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch(choice) {
            case 1:
                stockMenu(); // goes to stock management menu
                break;
            case 2:
                cout << "Item Information Management is handled by your dear bro.\n";
                break;
            case 3:
                cout << "Exiting program... Goodbye!\n";
                break;
            default:
                cout << "Invalid choice! Please try again.\n";
        }
    } while(choice != 3);

    return 0;
}

//  Stock Management Menu 
void stockMenu() {
    int choice;
    do {
        cout << "\nStock Management Menu n";
        cout << "1. Create Stock Record\n";
        cout << "2. Search Stock by ID\n";
        cout << "3. Update Stock Quantity\n";
        cout << "4. Delete Stock Record\n";
        cout << "5. Exit to Main Menu\n";
        cout << "\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch(choice) {
            case 1:
                createStock();
                break;
            case 2:
                searchStock();
                break;
            case 3:
                updateStock();
                break;
            case 4:
                deleteStock();
                break;
            case 5:
                cout << "Returning to Main Menu...\n";
                break;
            default:
                cout << "Invalid choice! Try again.\n";
        }
    } while(choice != 5);
}

// Create Stock Record 
void createStock() {
    Stock s;
    cout << "Enter Stock ID: ";
    cin >> s.id;
    cout << "Enter Stock Name: ";
    cin.ignore();
    getline(cin, s.name);
    cout << "Enter Quantity: ";
    cin >> s.quantity;

    stockList.push_back(s);
    cout << "Stock record added successfully!\n";
}

//  Search Stock by ID 
void searchStock() {
    int id;
    cout << "Enter Stock ID to search: ";
    cin >> id;

    for(auto &s : stockList) {
        if(s.id == id) {
            cout << "Stock Found!\n";
            cout << "ID: " << s.id << " | Name: " << s.name << " | Quantity: " << s.quantity << endl;
            return;
        }
    }
    cout << "Stock with ID " << id << " not found.\n";
}

// Update Stock Quantity 
void updateStock() {
    int id, change;
    cout << "Enter Stock ID to update: ";
    cin >> id;

    for(auto &s : stockList) {
        if(s.id == id) {
            cout << "Enter quantity change (+ for incoming, - for outgoing): ";
            cin >> change;
            s.quantity += change;
            cout << "Stock updated successfully! New quantity: " << s.quantity << endl;
            return;
        }
    }
    cout << "Stock with ID " << id << " not found.\n";
}

//  Delete Stock Record

void deleteStock() {
    int id;
    cout << "Enter Stock ID to delete: ";
    cin >> id;

    for(size_t i = 0; i < stockList.size(); i++) {
        if(stockList[i].id == id) {
            stockList.erase(stockList.begin() + i);
            cout << "Stock record deleted successfully!\n";
            return;
        }
    }
    cout << "Stock with ID " << id << " not found.\n";
};

void UpdateItemInfo()
{
    fstream fin("ItemInfo.csv");
    ofstream fout("ItemInfo_new.csv");

    int idnum, id2, count = 0;
    string new_qty, new_price;
    string line, word;
    vector<string> row;

    cout << "Enter Item ID to update: ";
    cin >> idnum;
    cin.ignore(); // Clear newline left in input buffer
    cout << "Enter new quantity: ";
    getline(cin, new_qty);
    cout << "Enter new price: ";
    getline(cin, new_price);

    while (getline(fin, line)) {
        row.clear();
        stringstream s(line);
        while (getline(s, word, ',')) {
            row.push_back(word);
        }

        id2 = stoi(row[0]);
        int row_size = row.size();
        if (id2 == idnum) {
            count = 1;
            row[2] = new_qty;
            row[3] = new_price;
        }

        for (int i = 0; i < row_size - 1; i++) {
            fout << row[i] << ",";
        }
        fout << row[row_size - 1] << "\n";
    }

    if (count == 0)
        cout << "Update not successful.\n";

    fin.close();
    fout.close();

    remove("ItemInfo.csv");
    rename("ItemInfo_new.csv", "ItemInfo.csv");
};
void DeleteItemInfo() {
    ifstream fin("ItemInfo.csv");
    ofstream fout("ItemInfo_new.csv");

    int idnum, id2, count = 0;
    string line;
    vector<string> row;

    cout << "Enter the ID of item to be deleted: ";
    cin >> idnum;

    while (getline(fin, line)) {
        row.clear();
        stringstream s(line);
        string word;

        while (getline(s, word, ',')) {
            row.push_back(word);
        }

        id2 = stoi(row[0]);

        if (id2 != idnum) {
            for (size_t i = 0; i < row.size() - 1; i++) {
                fout << row[i] << ",";
            }
            fout << row.back() << "\n";
        } else {
            count = 1;
        }
    }

    if (count == 1) {
        cout << "Item Deleted\n";
    } else {
        cout << "Item not found\n";
    }

    fin.close();
    fout.close();

    remove("ItemInfo.csv");
    rename("ItemInfo_new.csv", "ItemInfo.csv");
};

void CreateItemInfo() {
    ofstream fout("ItemInfo.csv", ios::app);
    int id;
    string name, category, supplier, price;

    cout << "Enter Item ID: ";
    cin >> id;
    cin.ignore();
    

    cout << "Enter Item Name: ";
    getline(cin, name);

    cout << "Enter Item Category";
    getline(cin, category);

    cout << "Enter Supplier Name: ";
    getline(cin, supplier);

    cout << "Enter Price: ";
    getline(cin, price);

    fout << id << "," << name << "," << category << "," << supplier << "," << price << "\n";
    fout.close();

    cout << "Item Record created successfully!\n";
};

void SearchItemInfo() {
    ifstream fin("ItemInfo.csv");

    int idnum, id2, found = 0;
    string line, word;
    vector<string> row;

    cout << "Enter Item ID to search: ";
    cin >> idnum;

    while (getline(fin, line)) {
        row.clear();
        stringstream s(line);

        while (getline(s, word, ',')) {
            row.push_back(word);
        }

        id2 = stoi(row[0]);

        if (id2 == idnum) {
            found = 1;
            cout << "\nItem Found!\n";
            cout << "ID: "<< row[0] << "\n";
            cout << "Name: "<< row[1] << "\n";
            cout << "Category: "<< row[2] << "\n";
            cout << "Supplier: "<< row[3] << "\n";
            cout << "Price: "<< row[4] << "\n";
            break;
        }
    }

    if (!found) {
        cout << "Item with ID " << idnum << "not found.\n";
    }

    fin.close();

};